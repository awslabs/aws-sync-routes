{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "API Gateway resource stack creation using Amplify CLI.",
  "Parameters": {
    "name": {
      "Description": "The name of the API Gateway resources.",
      "Type": "String",
      "Default": "awssyncroutes"
    },
    "env": {
      "Description": "The environment label for the API Gateway resources.",
      "Type": "String",
      "Default": "Prod"
    },
    "stageName": {
      "Description": "The name of the deployment stage.",
      "Type": "String",
      "Default": "v1"
    },
    "burstLimit": {
      "Description": "The maximum API request rate limit over a time ranging from one to a few seconds. The maximum API request rate limit depends on whether the underlying token bucket is at its full capacity. (reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-usageplan-throttlesettings.html#cfn-apigateway-usageplan-throttlesettings-burstlimit)",
      "Type": "String",
      "Default": 10
    },
    "rateLimit": {
      "Description": "The API request steady-state rate limit (average requests per second over an extended period of time). (reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-usageplan-throttlesettings.html#cfn-apigateway-usageplan-throttlesettings-ratelimit)",
      "Type": "String",
      "Default": 1
    },
    "allowMethods": {
      "Description": "The permitted HTTP methods.",
      "Type": "String",
      "Default": "'OPTIONS,PATCH'"
    },
    "allowHeaders": {
      "Description": "The permitted request headers.",
      "Type": "String",
      "Default": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
    },
    "functionawssyncroutesName": {
      "Description": "The cross-template reference to the name of the awssyncroutes Lambda function specified by concatenating the dependency components specified in ../../backend-config.json.",
      "Type": "String",
      "Default": "functionawssyncroutesName"
    },
    "functionawssyncroutesArn": {
      "Description": "The cross-template reference to the Amazon Resource Name (ARN) of the awssyncroutes Lambda function specified by concatenating the dependency components specified in ../../backend-config.json.",
      "Type": "String",
      "Default": "functionawssyncroutesArn"
    }
  },
  "Resources": {
    "RestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": {
          "Fn::Sub": "${name}-${env}"
        },
        "Description": "The ${env} REST API instance for synchronizing route table updates from the main route table in the specified VPC to all custom route tables.",
        "ApiKeySourceType": "HEADER",
        "EndpointConfiguration": {
          "Types": [
            "REGIONAL"
          ]
        },
        "FailOnWarnings": true
      }
    },
    "FunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
        "RestApi"
      ],
      "Properties": {
        "FunctionName": {
          "Ref": "functionawssyncroutesName"
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/*/*"
        }
      }
    },
    "RouteTableIdPatchRequestModel": {
      "Type": "AWS::ApiGateway::Model",
      "DependsOn": [
        "RestApi"
      ],
      "Properties": {
        "Name": "RouteTableIdPatchRequestModel",
        "Description": "Request body schema for PATCH '/vpcs/{vpcId}/route-tables/{routeTableId}'.",
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "RouteTableIdPatchRequestModel",
          "type": "object",
          "properties": {
            "destination-cidr-block": {
              "type": "string",
              "pattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
            },
            "dry-run": {
              "type": "boolean"
            }
          },
          "additionalProperties": false,
          "required": [
            "destination-cidr-block"
          ]
        }
      }
    },
    "RouteTableIdPatchResponseModel": {
      "Type": "AWS::ApiGateway::Model",
      "DependsOn": [
        "RestApi"
      ],
      "Properties": {
        "Name": "RouteTableIdPatchResponseModel",
        "Description": "Response body schema for PATCH '/vpcs/{vpcId}/route-tables/{routeTableId}'.",
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ContentType": "application/json",
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "RouteTableIdPatchResponseModel",
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          },
          "additionalProperties": false,
          "required": [
            "message"
          ]
        }
      }
    },
    "VpcsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [
        "RestApi"
      ],
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "RestApi",
            "RootResourceId"
          ]
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "PathPart": "vpcs"
      }
    },
    "VpcIdResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [
        "RestApi",
        "VpcsResource"
      ],
      "Properties": {
        "ParentId": {
          "Ref": "VpcsResource"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "PathPart": "{vpcId}"
      }
    },
    "RouteTablesResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [
        "RestApi",
        "VpcsResource",
        "VpcIdResource"
      ],
      "Properties": {
        "ParentId": {
          "Ref": "VpcIdResource"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "PathPart": "route-tables"
      }
    },
    "RouteTableIdResource": {
      "Type": "AWS::ApiGateway::Resource",
      "DependsOn": [
        "RestApi",
        "VpcsResource",
        "VpcIdResource",
        "RouteTablesResource"
      ],
      "Properties": {
        "ParentId": {
          "Ref": "RouteTablesResource"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "PathPart": "{routeTableId}"
      }
    },
    "RequestBodyValidator": {
      "Type": "AWS::ApiGateway::RequestValidator",
      "DependsOn": [
        "RestApi",
        "VpcsResource",
        "VpcIdResource",
        "RouteTablesResource",
        "RouteTableIdResource"
      ],
      "Properties": {
        "Name": "Validate body",
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ValidateRequestBody": true,
        "ValidateRequestParameters": false
      }
    },
    "RouteTableIdOptionsMethod": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [
        "RestApi",
        "VpcsResource",
        "VpcIdResource",
        "RouteTablesResource",
        "RouteTableIdResource"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "RouteTableIdResource"
        },
        "HttpMethod": "OPTIONS",
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Headers": true
            }
          }
        ],
        "Integration": {
          "Type": "MOCK",
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Methods": {
                  "Ref": "allowMethods"
                },
                "method.response.header.Access-Control-Allow-Headers": {
                  "Ref": "allowHeaders"
                },
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              }
            }
          ]
        }
      }
    },
    "RouteTableIdPatchMethod": {
      "Type": "AWS::ApiGateway::Method",
      "DependsOn": [
        "RestApi",
        "RouteTableIdPatchRequestModel",
        "RouteTableIdPatchResponseModel",
        "VpcsResource",
        "VpcIdResource",
        "RouteTablesResource",
        "RouteTableIdResource",
        "RequestBodyValidator"
      ],
      "Properties": {
        "RestApiId": {
          "Ref": "RestApi"
        },
        "ResourceId": {
          "Ref": "RouteTableIdResource"
        },
        "HttpMethod": "PATCH",
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "RequestModels": {
          "application/json": {
            "Ref": "RouteTableIdPatchRequestModel"
          }
        },
        "RequestValidatorId": {
          "Ref": "RequestBodyValidator"
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Headers": true
            },
            "ResponseModels": {
              "application/json": {
                "Ref": "RouteTableIdPatchResponseModel"
              }
            }
          },
          {
            "StatusCode": "400",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Headers": true
            },
            "ResponseModels": {
              "application/json": {
                "Ref": "RouteTableIdPatchResponseModel"
              }
            }
          },
          {
            "StatusCode": "404",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Headers": true
            },
            "ResponseModels": {
              "application/json": {
                "Ref": "RouteTableIdPatchResponseModel"
              }
            }
          },
          {
            "StatusCode": "422",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Headers": true
            },
            "ResponseModels": {
              "application/json": {
                "Ref": "RouteTableIdPatchResponseModel"
              }
            }
          },
          {
            "StatusCode": "500",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Headers": true
            },
            "ResponseModels": {
              "application/json": {
                "Ref": "RouteTableIdPatchResponseModel"
              }
            }
          }
        ],
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Sub": "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${functionawssyncroutesArn}/invocations"
          },
          "PassthroughBehavior": "WHEN_NO_MATCH",
          "IntegrationResponses": [
            {
              "StatusCode": "200"
            },
            {
              "StatusCode": "400"
            },
            {
              "StatusCode": "404"
            },
            {
              "StatusCode": "422"
            },
            {
              "StatusCode": "500"
            }
          ]
        }
      }
    },
    "DeploymentAPIGW": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "RestApi",
        "RouteTableIdOptionsMethod",
        "RouteTableIdPatchMethod"
      ],
      "Properties": {
        "Description": {
          "Fn::Sub": "Deployment stage: '${stageName}' for '${name}'."
        },
        "StageName": {
          "Ref": "stageName"
        },
        "RestApiId": {
          "Ref": "RestApi"
        },
        "StageDescription": {
          "CachingEnabled": false,
          "ThrottlingBurstLimit": {
            "Ref": "burstLimit"
          },
          "ThrottlingRateLimit": {
            "Ref": "rateLimit"
          }
        }
      }
    },
    "ApiKey": {
      "Type": "AWS::ApiGateway::ApiKey",
      "DependsOn": [
        "RestApi",
        "DeploymentAPIGW"
      ],
      "Properties": {
        "Name": {
          "Fn::Sub": "${name}-${env}-ApiKey"
        },
        "Description": {
          "Fn::Sub": "API key for ${name}-${env} PATCH '/vpcs/{vpcId}/route-tables/{routeTableId}'. The value of the API key must be supplied in the 'X-API-Key' request header."
        },
        "Enabled": true,
        "StageKeys": [
          {
            "RestApiId": {
              "Ref": "RestApi"
            },
            "StageName": {
              "Ref": "stageName"
            }
          }
        ]
      }
    },
    "UsagePlan": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "DependsOn": [
        "RestApi",
        "DeploymentAPIGW"
      ],
      "Properties": {
        "UsagePlanName": {
          "Fn::Sub": "${name}-${env}-UsagePlan"
        },
        "Description": {
          "Fn::Sub": "Usage plan for ${name}-${env} PATCH '/vpcs/{vpcId}/route-tables/{routeTableId}', which is used to associate the API key with the method."
        },
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "RestApi"
            },
            "Stage": {
              "Ref": "stageName"
            }
          }
        ],
        "Throttle": {
          "BurstLimit": {
            "Ref": "burstLimit"
          },
          "RateLimit": {
            "Ref": "rateLimit"
          }
        }
      }
    },
    "UsagePlanKey": {
      "Type": "AWS::ApiGateway::UsagePlanKey",
      "DependsOn": [
        "ApiKey",
        "UsagePlan"
      ],
      "Properties": {
        "KeyId": {
          "Ref": "ApiKey"
        },
        "KeyType": "API_KEY",
        "UsagePlanId": {
          "Ref": "UsagePlan"
        }
      }
    }
  },
  "Outputs": {
    "RootUrl": {
      "Description": "Root URL of the API gateway.",
      "Value": {
        "Fn::Sub": "https://${RestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${stageName}"
      }
    },
    "ApiName": {
      "Description": "API Friendly name",
      "Value": {
        "Ref": "name"
      }
    },
    "ApiId": {
      "Description": "API ID (prefix of API URL)",
      "Value": {
        "Ref": "RestApi"
      }
    }
  }
}